//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SWFC.WallServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WallData", Namespace="http://schemas.datacontract.org/2004/07/SWFCServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class WallData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MessageIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime MessagePostedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MessageContent {
            get {
                return this.MessageContentField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageContentField, value) != true)) {
                    this.MessageContentField = value;
                    this.RaisePropertyChanged("MessageContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MessageId {
            get {
                return this.MessageIdField;
            }
            set {
                if ((this.MessageIdField.Equals(value) != true)) {
                    this.MessageIdField = value;
                    this.RaisePropertyChanged("MessageId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime MessagePosted {
            get {
                return this.MessagePostedField;
            }
            set {
                if ((this.MessagePostedField.Equals(value) != true)) {
                    this.MessagePostedField = value;
                    this.RaisePropertyChanged("MessagePosted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WallServiceReference.IWallService")]
    public interface IWallService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallService/GetMessages", ReplyAction="http://tempuri.org/IWallService/GetMessagesResponse")]
        SWFC.WallServiceReference.WallData[] GetMessages();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallService/GetMessages", ReplyAction="http://tempuri.org/IWallService/GetMessagesResponse")]
        System.Threading.Tasks.Task<SWFC.WallServiceReference.WallData[]> GetMessagesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallService/CreateMessage", ReplyAction="http://tempuri.org/IWallService/CreateMessageResponse")]
        SWFC.WallServiceReference.WallData[] CreateMessage(SWFC.WallServiceReference.WallData message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallService/CreateMessage", ReplyAction="http://tempuri.org/IWallService/CreateMessageResponse")]
        System.Threading.Tasks.Task<SWFC.WallServiceReference.WallData[]> CreateMessageAsync(SWFC.WallServiceReference.WallData message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallService/DeleteMessage", ReplyAction="http://tempuri.org/IWallService/DeleteMessageResponse")]
        SWFC.WallServiceReference.WallData[] DeleteMessage(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IWallService/DeleteMessage", ReplyAction="http://tempuri.org/IWallService/DeleteMessageResponse")]
        System.Threading.Tasks.Task<SWFC.WallServiceReference.WallData[]> DeleteMessageAsync(int id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWallServiceChannel : SWFC.WallServiceReference.IWallService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WallServiceClient : System.ServiceModel.ClientBase<SWFC.WallServiceReference.IWallService>, SWFC.WallServiceReference.IWallService {
        
        public WallServiceClient() {
        }
        
        public WallServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public WallServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WallServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public WallServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public SWFC.WallServiceReference.WallData[] GetMessages() {
            return base.Channel.GetMessages();
        }
        
        public System.Threading.Tasks.Task<SWFC.WallServiceReference.WallData[]> GetMessagesAsync() {
            return base.Channel.GetMessagesAsync();
        }
        
        public SWFC.WallServiceReference.WallData[] CreateMessage(SWFC.WallServiceReference.WallData message) {
            return base.Channel.CreateMessage(message);
        }
        
        public System.Threading.Tasks.Task<SWFC.WallServiceReference.WallData[]> CreateMessageAsync(SWFC.WallServiceReference.WallData message) {
            return base.Channel.CreateMessageAsync(message);
        }
        
        public SWFC.WallServiceReference.WallData[] DeleteMessage(int id) {
            return base.Channel.DeleteMessage(id);
        }
        
        public System.Threading.Tasks.Task<SWFC.WallServiceReference.WallData[]> DeleteMessageAsync(int id) {
            return base.Channel.DeleteMessageAsync(id);
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SWFC.QuizServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuizHighscore", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class QuizHighscore : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string nameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int scoreField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string name {
            get {
                return this.nameField;
            }
            set {
                if ((object.ReferenceEquals(this.nameField, value) != true)) {
                    this.nameField = value;
                    this.RaisePropertyChanged("name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int score {
            get {
                return this.scoreField;
            }
            set {
                if ((this.scoreField.Equals(value) != true)) {
                    this.scoreField = value;
                    this.RaisePropertyChanged("score");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="QuizData", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class QuizData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string answerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int idField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string questionField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string answer {
            get {
                return this.answerField;
            }
            set {
                if ((object.ReferenceEquals(this.answerField, value) != true)) {
                    this.answerField = value;
                    this.RaisePropertyChanged("answer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int id {
            get {
                return this.idField;
            }
            set {
                if ((this.idField.Equals(value) != true)) {
                    this.idField = value;
                    this.RaisePropertyChanged("id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string question {
            get {
                return this.questionField;
            }
            set {
                if ((object.ReferenceEquals(this.questionField, value) != true)) {
                    this.questionField = value;
                    this.RaisePropertyChanged("question");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="QuizServiceReference.QuizInterface")]
    public interface QuizInterface {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QuizInterface/AddQuestion", ReplyAction="http://tempuri.org/QuizInterface/AddQuestionResponse")]
        void AddQuestion(string question, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QuizInterface/AddQuestion", ReplyAction="http://tempuri.org/QuizInterface/AddQuestionResponse")]
        System.Threading.Tasks.Task AddQuestionAsync(string question, string answer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QuizInterface/GetHighscore", ReplyAction="http://tempuri.org/QuizInterface/GetHighscoreResponse")]
        SWFC.QuizServiceReference.QuizHighscore[] GetHighscore();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QuizInterface/GetHighscore", ReplyAction="http://tempuri.org/QuizInterface/GetHighscoreResponse")]
        System.Threading.Tasks.Task<SWFC.QuizServiceReference.QuizHighscore[]> GetHighscoreAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QuizInterface/GetTenRandomQuestions", ReplyAction="http://tempuri.org/QuizInterface/GetTenRandomQuestionsResponse")]
        string[] GetTenRandomQuestions();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QuizInterface/GetTenRandomQuestions", ReplyAction="http://tempuri.org/QuizInterface/GetTenRandomQuestionsResponse")]
        System.Threading.Tasks.Task<string[]> GetTenRandomQuestionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QuizInterface/CheckAnswersAddScore", ReplyAction="http://tempuri.org/QuizInterface/CheckAnswersAddScoreResponse")]
        void CheckAnswersAddScore(SWFC.QuizServiceReference.QuizData[] questionsAndAnswers, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QuizInterface/CheckAnswersAddScore", ReplyAction="http://tempuri.org/QuizInterface/CheckAnswersAddScoreResponse")]
        System.Threading.Tasks.Task CheckAnswersAddScoreAsync(SWFC.QuizServiceReference.QuizData[] questionsAndAnswers, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QuizInterface/CheckIfQuestionExist", ReplyAction="http://tempuri.org/QuizInterface/CheckIfQuestionExistResponse")]
        bool CheckIfQuestionExist(string question);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/QuizInterface/CheckIfQuestionExist", ReplyAction="http://tempuri.org/QuizInterface/CheckIfQuestionExistResponse")]
        System.Threading.Tasks.Task<bool> CheckIfQuestionExistAsync(string question);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface QuizInterfaceChannel : SWFC.QuizServiceReference.QuizInterface, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class QuizInterfaceClient : System.ServiceModel.ClientBase<SWFC.QuizServiceReference.QuizInterface>, SWFC.QuizServiceReference.QuizInterface {
        
        public QuizInterfaceClient() {
        }
        
        public QuizInterfaceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public QuizInterfaceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuizInterfaceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public QuizInterfaceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void AddQuestion(string question, string answer) {
            base.Channel.AddQuestion(question, answer);
        }
        
        public System.Threading.Tasks.Task AddQuestionAsync(string question, string answer) {
            return base.Channel.AddQuestionAsync(question, answer);
        }
        
        public SWFC.QuizServiceReference.QuizHighscore[] GetHighscore() {
            return base.Channel.GetHighscore();
        }
        
        public System.Threading.Tasks.Task<SWFC.QuizServiceReference.QuizHighscore[]> GetHighscoreAsync() {
            return base.Channel.GetHighscoreAsync();
        }
        
        public string[] GetTenRandomQuestions() {
            return base.Channel.GetTenRandomQuestions();
        }
        
        public System.Threading.Tasks.Task<string[]> GetTenRandomQuestionsAsync() {
            return base.Channel.GetTenRandomQuestionsAsync();
        }
        
        public void CheckAnswersAddScore(SWFC.QuizServiceReference.QuizData[] questionsAndAnswers, string name) {
            base.Channel.CheckAnswersAddScore(questionsAndAnswers, name);
        }
        
        public System.Threading.Tasks.Task CheckAnswersAddScoreAsync(SWFC.QuizServiceReference.QuizData[] questionsAndAnswers, string name) {
            return base.Channel.CheckAnswersAddScoreAsync(questionsAndAnswers, name);
        }
        
        public bool CheckIfQuestionExist(string question) {
            return base.Channel.CheckIfQuestionExist(question);
        }
        
        public System.Threading.Tasks.Task<bool> CheckIfQuestionExistAsync(string question) {
            return base.Channel.CheckIfQuestionExistAsync(question);
        }
    }
}
